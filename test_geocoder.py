"""
Test del sistema de ubicaci√≥n usando geocoder para astrotracker.
"""

from ubicacion import UbicacionManager

def test_ubicacion_basica():
    """Test b√°sico de obtenci√≥n de ubicaci√≥n."""
    print("üåç TEST 1: Obtenci√≥n b√°sica de ubicaci√≥n")
    print("-" * 50)
    
    ubicacion_mgr = UbicacionManager()
    ubicacion = ubicacion_mgr.obtener_ubicacion()
    
    if ubicacion:
        print("‚úÖ Ubicaci√≥n obtenida exitosamente")
        ubicacion_mgr.imprimir_ubicacion()
        return True
    else:
        print("‚ùå No se pudo obtener la ubicaci√≥n")
        return False

def test_ubicacion_por_direccion():
    """Test de geocodificaci√≥n por direcci√≥n."""
    print("\nüè† TEST 2: Geocodificaci√≥n por direcci√≥n")
    print("-" * 50)
    
    ubicacion_mgr = UbicacionManager()
    
    # Prueba con diferentes direcciones
    direcciones = [
        "Madrid, Espa√±a",
        "Barcelona, Spain",
        "Mexico City, Mexico"
    ]
    
    for direccion in direcciones:
        print(f"\nüîç Probando: {direccion}")
        resultado = ubicacion_mgr.obtener_ubicacion_por_direccion(direccion)
        
        if resultado:
            print(f"‚úÖ Encontrado: {resultado['direccion']}")
            print(f"   Coordenadas: {resultado['latitud']:.4f}, {resultado['longitud']:.4f}")
        else:
            print(f"‚ùå No se encontr√≥: {direccion}")

def test_informacion_detallada():
    """Test de informaci√≥n detallada."""
    print("\nüìç TEST 3: Informaci√≥n detallada")
    print("-" * 50)
    
    ubicacion_mgr = UbicacionManager()
    ubicacion = ubicacion_mgr.obtener_ubicacion()
    
    if ubicacion:
        print("Obteniendo informaci√≥n detallada...")
        detallada = ubicacion_mgr.obtener_informacion_detallada()
        
        if detallada:
            print("‚úÖ Informaci√≥n detallada obtenida")
            ubicacion_mgr.imprimir_ubicacion()
        else:
            print("‚ùå No se pudo obtener informaci√≥n detallada")

def test_metodos_alternativos():
    """Test de m√©todos alternativos."""
    print("\nüîÑ TEST 4: M√©todos alternativos")
    print("-" * 50)
    
    ubicacion_mgr = UbicacionManager()
    ubicacion = ubicacion_mgr.obtener_ubicacion_alternativa()
    
    if ubicacion:
        print("‚úÖ Ubicaci√≥n obtenida con m√©todo alternativo")
        print(f"Proveedor usado: {ubicacion.get('proveedor', 'N/A')}")
    else:
        print("‚ùå M√©todos alternativos fallaron")

def test_earth_location():
    """Test del objeto EarthLocation para astronom√≠a."""
    print("\nüåå TEST 5: Objeto EarthLocation")
    print("-" * 50)
    
    ubicacion_mgr = UbicacionManager()
    ubicacion = ubicacion_mgr.obtener_ubicacion()
    
    if ubicacion:
        earth_loc = ubicacion_mgr.get_earth_location()
        
        if earth_loc:
            print("‚úÖ Objeto EarthLocation creado exitosamente")
            print(f"   Latitud: {earth_loc.lat}")
            print(f"   Longitud: {earth_loc.lon}")
            print(f"   Altura: {earth_loc.height}")
            print("\nüî¨ Esto es √∫til para c√°lculos astron√≥micos precisos")
        else:
            print("‚ùå No se pudo crear EarthLocation")

def test_guardado_y_carga():
    """Test de guardado y carga de configuraci√≥n."""
    print("\nüíæ TEST 6: Guardado y carga")
    print("-" * 50)
    
    ubicacion_mgr = UbicacionManager()
    ubicacion = ubicacion_mgr.obtener_ubicacion()
    
    if ubicacion:
        # Guardar
        if ubicacion_mgr.guardar_ubicacion("test_ubicacion.json"):
            print("‚úÖ Ubicaci√≥n guardada exitosamente")
            
            # Crear nueva instancia y cargar
            nueva_instancia = UbicacionManager()
            if nueva_instancia.cargar_ubicacion("test_ubicacion.json"):
                print("‚úÖ Ubicaci√≥n cargada exitosamente")
                print("Datos cargados:")
                nueva_instancia.imprimir_ubicacion()
            else:
                print("‚ùå Error cargando ubicaci√≥n")
        else:
            print("‚ùå Error guardando ubicaci√≥n")

def main():
    """Ejecutar todos los tests."""
    print("üöÄ INICIANDO TESTS DEL SISTEMA DE UBICACI√ìN GEOCODER")
    print("=" * 70)
    
    try:
        # Test b√°sico
        if test_ubicacion_basica():
            # Tests adicionales solo si el b√°sico funciona
            test_ubicacion_por_direccion()
            test_informacion_detallada()
            test_metodos_alternativos()
            test_earth_location()
            test_guardado_y_carga()
        
        print("\nüéØ TESTS COMPLETADOS")
        print("=" * 70)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Tests interrumpidos por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error durante los tests: {e}")

if __name__ == "__main__":
    main()